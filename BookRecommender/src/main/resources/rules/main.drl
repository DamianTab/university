package main;
import javax.swing.*;
import java.util.ArrayList;

global JFrame okno;


declare enum Pytania
    FICTION_TYPE("What type of fiction you'd like?",
        ["Popular fiction",
         "Literary fiction",
         "Fiction for kids",
         "Non-fiction",
         "Self-help book"
         ]),

        // Popular fiction branch
        THRILLER("Would you like an intense thriller?",
            ["Yes", "No"]),

        MYSTERY("How about a mystery book?",
            ["Sure", "I'd go for something else"]),

        FAMILY("Maybe you are in mood for a family book?",
            ["Why not?", "Nah"]),

        FAN_HORROR("Then maybe you'd enjoy a fantasy horror book?",
            ["Bring it on", "Better not"]),

        ROMANCE("Would you like an intense Romance?",
            ["Yes", "No"]),

        TIME_OR_SUSPENSE("Time travel or maybe some book that keeps in suspense?",
            ["Time travel",
             "Suspense"]),

        // Literary fiction branch

        DYSTOPIA("Would you like to read some dystopia positions?",
                 ["Yes", "No"]),

        FANTASY("Then maybe some Fantasy?",
                 ["Sure", "No"]),

        IDENTITY("Would you like to some Identity books?",
                 ["Why not?", "No"]),

        MAGICAL_REALISM("How about Magical Realism?",
                 ["Yep", "Nope"]),

        COMIC("Would you like to smile with comic book?",
                 ["Bring it on", "Better not"]),

        CRIME("Would you like to read some crime positions?",
                 ["Yes", "No"]),

        HISTORY("How about history literature?",
                 ["Ok", "No"]),

        FAMILY_LITERARY("Maybe you are in mood for a family book?",
                 ["Sure", "Nope"]),

        MYSTERY_LITERARY("Looking for Mystery?",
                 ["YES !", "Definitely No"]),
            MYSTERY_LITERARY_TYPE("Which type of mystery?",
                     ["Literary", "Suspense"]),

        BASEBALL("Do you want to know more about baseball?",
                 ["Of course", "No"]),

        CULTURE_OR_FANTASY("Would you like to discover new cultures?",
                 ["Yes", "No"]),
            NEW_CULTURE_TYPE    ("Which topic is interesting for you?",
                     ["Civil rights", "Epistolary", "Japan", "Historical",
                      "Romance", "War"]),

        FANTASY_TYPE("Eventually you have to choose fantasy book. Which topic is the most interesting?",
                 ["Epic", "Video games", "Vampires", "Historical", "Magic",
                  "Literary", "Romance"]),

        // Fiction for Kids branch

        YOUNG_ADULTS("Do you want literature for young adults?",
                 ["Yeah", "Nope"]),

        CHILDREN_OR_TEEN("Do you want literature for children or teens?",
                 ["Children", "Teen"]),

        TEEN_TYPE("Then, what is your favourite type of teen book?",
            ["Historical",
             "Thriller",
             "Fantasy",
             "Relationships",
             "Vampires"]),

        KIDS_TYPE("What type of stories do you like the most?",
            ["Coming of age",
             "Thriller",
             "Peril",
             "Fantasy"]),

        ADULTS_TYPE("What do you prefer?", ["A historical one", "A comedy, please"]),

        // Nonfiction

        MEMOIRS("Would you like to read a memoir?", ["Yeah", "I'd go for something else"]),

        MEMO_TYPE("What type of memoir?",
                ["Family",
                 "Humor",
                 "Medical",
                 "Current events",
                 "Self-fulfillment"]),

        FOOD("Maybe fancy reading a story about food?",  ["Why not?", "No"]),

        BUSINESS("Would you like a business book then?", ["Yes", "No"]),

        BIOGRAPHY("What about a biography?", ["Yeah", "Nope"]),

        GRAMMAR("A grammar-related story?", ["Why not?", "I'd go for something else"]),

        HISTORY_NONFICTION("Then maybe something about history?", ["Ok", "Not this time"]),

        HUMOR("What about book with humor?", ["Yes", "Yes, but actually no"]),

        INSPIRATION("Would you like a inspirational book ?", ["Lovely!", "Nope"]),

        US_GOVERNMENT_OR_NUTRITION("Now you have to make decision between U.S.Government and Nutrition theme. Choose wisely !
        ", ["U.S. Government", "Nutrition"]),

        // Self-Help branch
        RELATIONSHIP("Would you like a relationship story?", ["Yes", "No"]),

        INSPIRATIONAL_OR_BUSINESS("Would you like a book about business or maybe inspirational one?",
            ["Inspirational",
             "Business"]);



    tresc: String
    opcje: ArrayList
end;


declare Odpowiedz
    pytanie : Pytania @key
    wybor: String
end


declare Wynik
    odpowiedz: String
end


rule "Odpytywajnik"
when
    q: Pytania();
then
    Object[] opcje = q.getOpcje().toArray();
    int ans = JOptionPane.showOptionDialog(okno, q.getTresc(), "", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, opcje, 1);

    if(ans != JOptionPane.CLOSED_OPTION) {
        Odpowiedz odpowiedz = new Odpowiedz(q, (String)opcje[ans]);
       	insert(odpowiedz);
    }
end


rule "Odpowiedz"
when
    w: Wynik();
then
    JOptionPane.showMessageDialog(okno, "Books recommended for you: \n" + w.getOdpowiedz());
end


rule "Init"
when
then
    insert(Pytania.FICTION_TYPE);
end

// Fiction for kids branch
rule "genre-kidfic"
when
    ans: Odpowiedz(pytanie == Pytania.FICTION_TYPE, wybor == "Fiction for kids");
then
    insert(Pytania.YOUNG_ADULTS);
end

rule "YOUNG_ADULTS-Yeah"
when
    ans: Odpowiedz(pytanie == Pytania.YOUNG_ADULTS, wybor == "Yeah");
then
    insert(Pytania.ADULTS_TYPE);
end

rule "YOUNG_ADULTS-Nope"
when
    ans: Odpowiedz(pytanie == Pytania.YOUNG_ADULTS, wybor == "Nope");
then
    insert(Pytania.CHILDREN_OR_TEEN);
end

rule "CHILDREN_OR_TEEN-Children"
when
    ans: Odpowiedz(pytanie == Pytania.CHILDREN_OR_TEEN, wybor == "Children");
then
    insert(Pytania.KIDS_TYPE);
end

rule "CHILDREN_OR_TEEN-Teen"
when
    ans: Odpowiedz(pytanie == Pytania.CHILDREN_OR_TEEN, wybor == "Teen");
then
    insert(Pytania.TEEN_TYPE);
end

rule "kid-coming of age"
when
    ans: Odpowiedz(pytanie == Pytania.KIDS_TYPE, wybor == "Coming of age");
then
    insert(new Wynik("Wonder by R.J. Palacio"));
end


rule "kid-thriller"
when
    ans: Odpowiedz(pytanie == Pytania.KIDS_TYPE, wybor == "Thriller");
then
    insert(new Wynik("The Lightning Thief by Rick Riordan"));
end


rule "kid-peril"
when
    ans: Odpowiedz(pytanie == Pytania.KIDS_TYPE, wybor == "Peril");
then
    insert(new Wynik("A Series of Unfortunate Events: The End by Lemony Snicket"));
end


rule "kid-fantasy"
when
    ans: Odpowiedz(pytanie == Pytania.KIDS_TYPE, wybor == "Fantasy");
then
    insert(new Wynik
        ("Harry Potter and the Deathly Hallows by J.K. Rowling\n" +
         "Coraline by Neil Gaiman\n" +
         "The Graveyard Book by Neil Gaiman"));
end


rule "teen-historical"
when
    ans: Odpowiedz(pytanie == Pytania.TEEN_TYPE, wybor == "Historical");
then
    insert(new Wynik("Clockwork Angel by Cassandra Clare"));
end


rule "teen-thriller"
when
    ans: Odpowiedz(pytanie == Pytania.TEEN_TYPE, wybor == "Thriller");
then
    insert(new Wynik("The Hunger Games by Suzanne Collins"));
end


rule "teen-fantasy"
when
    ans: Odpowiedz(pytanie == Pytania.TEEN_TYPE, wybor == "Fantasy");
then
    insert(new Wynik
        ("Eragon by Christopher Paolini\n" +
         "Insurgent by Veronica Roth\n" +
         "City of Bones by Cassandra Clare"));
end


rule "teen-relationships"
when
    ans: Odpowiedz(pytanie == Pytania.TEEN_TYPE, wybor == "Relationships");
then
    insert(new Wynik
        ("The Fault in Our Stars by John Green\n" +
         "Looking for Alaska by John Green"));
end


rule "teen-vampires" // XD
when
    ans: Odpowiedz(pytanie == Pytania.TEEN_TYPE, wybor == "Vampires");
then
    insert(new Wynik
        ("Twillight by Stephenie Meyer\n" +
         "Vampire Academy by Richelle Mead"));
end


rule "adults-historical"
when
    ans: Odpowiedz(pytanie == Pytania.ADULTS_TYPE, wybor == "A historical one");
then
    insert(new Wynik("Diary of a Wimpy Kid by Jeff Kinney"));
end


rule "adults-comedy"
when
    ans: Odpowiedz(pytanie == Pytania.ADULTS_TYPE, wybor == "A comedy, please");
then
    insert(new Wynik("The Book Thief by Markus Zusak"));
end

// Pop fiction branch
rule "genre-popfic"
when
    ans: Odpowiedz(pytanie == Pytania.FICTION_TYPE, wybor == "Popular fiction");
then
    insert(Pytania.THRILLER);
end

rule "thriller-yes"
when
    ans: Odpowiedz(pytanie == Pytania.THRILLER, wybor == "Yes");
then
    insert(new Wynik
        ("Before I Go To Sleep by S.J. Watson \n" +
         "Nineteen Minutes by Jodi Picoult\n" +
         "The Girl with the Dragon Tatoo by Stieg Larsson"));
end


rule "thriller-no"
when
    ans: Odpowiedz(pytanie == Pytania.THRILLER, wybor == "No");
then
    insert(Pytania.MYSTERY);
end


rule "mystery-yes"
when
    ans: Odpowiedz(pytanie == Pytania.MYSTERY, wybor == "Sure");
then
    insert(new Wynik
        ("The Lovely Bones by Alice Sebold\n" +
         "The Thirteenth Tale by Diane Setterfield"));
end


rule "mystery-no"
when
    ans: Odpowiedz(pytanie == Pytania.MYSTERY, wybor == "I'd go for something else");
then
    insert(Pytania.FAMILY);
end


rule "family-yes"
when
    ans: Odpowiedz(pytanie == Pytania.FAMILY, wybor == "Why not?")
then
    insert(new Wynik
        ("Room by Emma Donghue\n" +
         "My Sister's Keeper by Jodi Picoult\n" +
         "The Memory Keeper's Daughter by Kim Edwards\n" +
         "The Language of Flowers by Vanessa Diffenbaugh"));
end


rule "family-no"
when
    ans: Odpowiedz(pytanie == Pytania.FAMILY, wybor == "Nah");
then
    insert(Pytania.FAN_HORROR);
end


rule "fanhorror-yes"
when
    ans: Odpowiedz(pytanie == Pytania.FAN_HORROR, wybor == "Bring it on");
then
    insert(new Wynik("The Historian by Elizabeth Kostova"));
end


rule "fanhorror-nope"
when
    ans: Odpowiedz(pytanie == Pytania.FAN_HORROR, wybor == "Better not");
then
    insert(Pytania.ROMANCE);
end

rule "ROMANCE-Yes"
when
    ans: Odpowiedz(pytanie == Pytania.ROMANCE, wybor == "Yes");
then
    insert(new Wynik(
        "The Other Boleyn Girl by Philippa Gregory\n" +
        "Snow Flower and the Secret Fan by Lisa See"));
end

rule "ROMANCE-No"
when
    ans: Odpowiedz(pytanie == Pytania.ROMANCE, wybor == "No");
then
    insert(Pytania.TIME_OR_SUSPENSE);
end


rule "TIME_OR_SUSPENSE-Time travel"
when
    ans: Odpowiedz(pytanie == Pytania.TIME_OR_SUSPENSE, wybor == "Time travel");
then
    insert(new Wynik
        ("The Time Traveller's Wife by Audrey Niffenegger\n" +
         "11/22/63 by Stephen King"));
end


rule "TIME_OR_SUSPENSE-Suspense"
when
    ans: Odpowiedz(pytanie == Pytania.TIME_OR_SUSPENSE, wybor == "Suspense");
then
    insert(new Wynik
        ("Gone Girl by Gillian Flynn\n" +
         "The Da Vinci Code by Dan Brown\n" +
         "Joyland by Stephen King"));
end

// Self-help branch
rule "genre-self help"
when
    ans: Odpowiedz(pytanie == Pytania.FICTION_TYPE, wybor == "Self-help book");
then
    insert(Pytania.RELATIONSHIP);
end


rule "RELATIONSHIP-Yes"
when
    ans: Odpowiedz(pytanie == Pytania.RELATIONSHIP, wybor == "Yes");
then
    insert(new Wynik
        ("Quiet: The Power of Introverts in a World that Can't Stop Talking by Susan Cain"));
end

rule "RELATIONSHIP-No"
when
    ans: Odpowiedz(pytanie == Pytania.RELATIONSHIP, wybor == "No");
then
    insert(Pytania.INSPIRATIONAL_OR_BUSINESS);
end


rule "INSPIRATIONAL_OR_BUSINESS-inspirational"
when
    ans: Odpowiedz(pytanie == Pytania.INSPIRATIONAL_OR_BUSINESS, wybor == "Inspirational");
then
    insert(new Wynik
        ("The Five People you Meet in Heaven by Mitch Albom\n" +
         "Daring Greatly: How the Courage to Be Vurnelable Transforms the Way We Live," +
         "Love, Parent and Lead by Brene Brown"));
end


rule "INSPIRATIONAL_OR_BUSINESS-business"
when
    ans: Odpowiedz(pytanie == Pytania.INSPIRATIONAL_OR_BUSINESS, wybor == "Business");
then
    insert(new Wynik
        ("The Five Dysfunctions of a Team by Patrick Lencioni\n" +
         "Strengths Finder 2.0 by Tom Rath\n" +
         "Lean In by Sheryl Sandberg\n" +
         "Good to Great by Jim Collins\n" +
         "The Power of Habit: Why We Do What We Do in Life and Business by Charles Duhigg"));
end

// Non-fiction branch
rule "genre-Non-fiction"
when
    ans: Odpowiedz(pytanie == Pytania.FICTION_TYPE, wybor == "Non-fiction");
then
    insert(Pytania.MEMOIRS);
end

rule "MEMOIRS-Yeah"
when
    ans: Odpowiedz(pytanie == Pytania.MEMOIRS, wybor == "Yeah");
then
    insert(Pytania.MEMO_TYPE);
end

rule "memotype-humor"
when
    ans: Odpowiedz(pytanie == Pytania.MEMOIRS, wybor == "Humor");
then
    insert(new Wynik("Bossypants by Tina Fey\n" +
                     "Running with Scissors by Augusten Burroughs"));
end

rule "memotype-family"
when
    ans: Odpowiedz(pytanie == Pytania.MEMOIRS, wybor == "Family");
then
    insert(new Wynik("The Glass Castle by Jeannette Walls\n" +
                     "A Heartbreaking Work of Staggering Genius by Dave Eggers"));
end

rule "memotype-medical"
when
    ans: Odpowiedz(pytanie == Pytania.MEMOIRS, wybor == "Medical");
then
    insert(new Wynik("Proof of Heaven: A Neurosurgeon's Journey into the Afterlife"+
                     " by Eben Alexander"));
end

rule "memotype-timely"
when
    ans: Odpowiedz(pytanie == Pytania.MEMOIRS, wybor == "Current events");
then
    insert(new Wynik("Three Cups of Tea by Greg Mortenson and David Oliver Relin"));
end

rule "memotype-fulfillment"
when
    ans: Odpowiedz(pytanie == Pytania.MEMOIRS, wybor == "Self-fulfillment");
then
    insert(new Wynik("Eat, Pray, Love by Elizabeth Gilbert"));
end

rule "MEMOIRS-I'd go for something else"
when
    ans: Odpowiedz(pytanie == Pytania.MEMOIRS, wybor == "I'd go for something else");
then
    insert(Pytania.FOOD);
end

rule "FOOD-Why not?"
when
     ans: Odpowiedz(pytanie == Pytania.FOOD, wybor == "Why not?");
then
    insert(new Wynik("The Omnivore's Dilemma: A natural history of four meal by Michael Pollan"));
end

rule "FOOD-No"
when
    ans: Odpowiedz(pytanie == Pytania.FOOD, wybor == "No");
then
    insert(Pytania.BUSINESS);
end

rule "BUSINESS-Yes"
when
    ans: Odpowiedz(pytanie == Pytania.BUSINESS, wybor == "Yes");
then
    insert(new Wynik("The Tipping Point by Malcolm Gladwell\n" +
                               "Blink by Malcolm Gladwell\n" +
                               "Freakonomics by Steven D. Levitt"));
end

rule "BUSINESS-No"
when
    ans: Odpowiedz(pytanie == Pytania.BUSINESS, wybor == "No");
then
    insert(Pytania.BIOGRAPHY);
end

rule "BIOGRAPHY-Yeah"
when
    ans: Odpowiedz(pytanie == Pytania.BIOGRAPHY, wybor == "Yeah");
then
    insert(new Wynik("The Immortal Life of Henritta Lack by Rebecca Skloot\n" +
                               "Prespolis by Marjane Satrapi\n"));
end

rule "BIOGRAPHY-Nope"
when
    ans: Odpowiedz(pytanie == Pytania.BIOGRAPHY, wybor == "Nope");
then
    insert(Pytania.GRAMMAR);
end

rule "GRAMMAR-Why not?"
when
    ans: Odpowiedz(pytanie == Pytania.GRAMMAR, wybor == "Why not?");
then
    insert(new Wynik("Eats, Shoots and Leaves by Lynne Truss"));
end

rule "GRAMMAR-I'd go for something else"
when
    ans: Odpowiedz(pytanie == Pytania.GRAMMAR, wybor == "I'd go for something else");
then
    insert(Pytania.HISTORY_NONFICTION);
end


rule "HISTORY_NONFICTION-Ok"
when
  ans: Odpowiedz(pytanie == Pytania.HISTORY_NONFICTION, wybor == "Ok");
then
  insert(new Wynik("The Devil in the White City: Murder, Magic, and Madness at the Fair That Changed America by Eric Larson"));
end

rule "HISTORY_NONFICTION-Not this time"
when
  ans: Odpowiedz(pytanie == Pytania.HISTORY_NONFICTION, wybor == "Not this time");
then
  insert(Pytania.HUMOR);
end

rule "HUMOR-Yes"
when
    ans: Odpowiedz(pytanie == Pytania.HUMOR, wybor == "Yes");
then
    insert(new Wynik("Me Talk Pretty One Day by David Sedaris"));
end

rule "HUMOR-Yes, but actually no"
when
    ans: Odpowiedz(pytanie == Pytania.HUMOR, wybor == "Yes, but actually no");
then
    insert(Pytania.INSPIRATION);
end

rule "INSPIRATION-Lovely!"
when
    ans: Odpowiedz(pytanie == Pytania.INSPIRATION, wybor == "Lovely!");
then
    insert(new Wynik("The Last Lecture by Randy Pausch"));
end

rule "INSPIRATION-Nope"
when
  ans: Odpowiedz(pytanie == Pytania.INSPIRATION, wybor == "Nope");
then
  insert(Pytania.US_GOVERNMENT_OR_NUTRITION);
end

rule "US_GOVERNMENT_OR_NUTRITION-U.S. Government"
when
  ans: Odpowiedz(pytanie == Pytania.US_GOVERNMENT_OR_NUTRITION, wybor == "U.S. Government");
then
  insert(new Wynik("The Liberty Amendments: Restoring the American Republic by Mark R. Levin"));
end

rule "US_GOVERNMENT_OR_NUTRITION-Nutrition"
when
  ans: Odpowiedz(pytanie == Pytania.US_GOVERNMENT_OR_NUTRITION, wybor == "Nutrition");
then
  insert(new Wynik("Fast Food Nation by Eric Schlosser"));
end

// Literary Fiction branch

rule "genre-Literary-fiction"
when
    ans: Odpowiedz(pytanie == Pytania.FICTION_TYPE, wybor == "Literary fiction");
then
    insert(Pytania.DYSTOPIA);
end

rule "DYSTOPIA-yes"
when
    ans: Odpowiedz(pytanie == Pytania.DYSTOPIA, wybor == "Yes");
then
    insert(new Wynik("The Road by Cormac McCarthy\n" +
                     "Oryx and Crake by Margaret Atwood"));
end

rule "DYSTOPIA-no"
when
    ans: Odpowiedz(pytanie == Pytania.DYSTOPIA, wybor == "No");
then
    insert(Pytania.FANTASY);
end

rule "Fantasy_litfic_yes"
when
    ans: Odpowiedz(pytanie == Pytania.FANTASY, wybor == "Sure");
then
    insert(new Wynik("American Gods by Neil Gaiman\n" +
                     "Never Let Me Go by Kazuo Ishiguro"));
end

rule "Fantasy_litfic_no"
when
    ans: Odpowiedz(pytanie == Pytania.FANTASY, wybor == "No");
then
    insert(Pytania.IDENTITY);
end

rule "Identity_YEP"
when
    ans: Odpowiedz(pytanie == Pytania.IDENTITY, wybor == "Why not?");
then
    insert(new Wynik("White Teeth by Zadie Smith\n" +
                     "The Brief Wondrous Life of Oscar Who by Junot Diaz\n" +
                     "The Namesake by Jhumpa Lahiri"));
end

rule "Identity_nope"
when
    ans: Odpowiedz(pytanie == Pytania.IDENTITY, wybor == "No");
then
    insert(Pytania.MAGICAL_REALISM);
end

rule "Magical_realism_yes"
when
    ans: Odpowiedz(pytanie == Pytania.MAGICAL_REALISM, wybor == "Yep");
then
    insert(new Wynik("The History of Love by Nicole Krauss\n" +
                     "Extremely Loud and Incredibly Close by Jonathan Safran Foer\n" +
                     "Life of Pi by Yann Martel\n" +
                     "Everything is Illuminated by Jonathan Safran Foer"));
end

rule "Magical_realism_nope"
when
    ans: Odpowiedz(pytanie == Pytania.MAGICAL_REALISM, wybor == "Nope");
then
    insert(Pytania.COMIC);
end;

rule "chce komiksa"
when
    ans: Odpowiedz(pytanie == Pytania.COMIC, wybor == "Bring it on");
then
    insert(new Wynik("The Amazing Adventures of Kavalier and Clay by Michael Chabon"));
end

rule "nie chce komiksa"
when
    ans: Odpowiedz(pytanie == Pytania.COMIC, wybor == "Better not");
then
    insert(Pytania.CRIME);
end

rule "crime-yes"
when
    ans: Odpowiedz(pytanie == Pytania.CRIME, wybor == "Yes");
then
    insert(new Wynik("No Country for Old Men by Cormac McCarthy"));
end

rule "crime-no"
when
    ans: Odpowiedz(pytanie == Pytania.CRIME, wybor == "No")
then
    insert(Pytania.HISTORY);
end

rule "History-YES"
when
    ans: Odpowiedz(pytanie == Pytania.HISTORY, wybor == "Ok");
then
    insert(new Wynik("Wolf Hall by Hillary Mantel"));
end

rule "History-NO"
when
    ans: Odpowiedz(pytanie == Pytania.HISTORY, wybor == "No");
then
    insert(Pytania.FAMILY_LITERARY);
end

rule "Family Literature: YES"
when
    ans: Odpowiedz(pytanie == Pytania.FAMILY_LITERARY, wybor =="Sure");
then
    insert(new Wynik("The Corrections by Jonathan Franzen\n" +
                     "Middlesex by Jeffrey Eugenides"));
end

rule "Family Literature: NO"
when
    ans: Odpowiedz(pytanie == Pytania.FAMILY_LITERARY, wybor == "Nope");
then
    insert(Pytania.MYSTERY_LITERARY);
end

rule "mystery_literature_yes"
when
    ans: Odpowiedz(pytanie == Pytania.MYSTERY_LITERARY, wybor == "YES !");
then
    insert(Pytania.MYSTERY_LITERARY_TYPE);
end

rule "mystery_type_literary"
when
    ans: Odpowiedz(pytanie == Pytania.MYSTERY_LITERARY_TYPE, wybor == "Literary");
then
    insert(new Wynik("The Sweetness at the Bottom of the Pie by Alan Bradley"));
end

rule "mystery-type-suspense"
when
    ans: Odpowiedz(pytanie == Pytania.MYSTERY_LITERARY_TYPE, wybor == "Suspense");
then
    insert(new Wynik("Atonement by Ian McEwan\n" +
                     "The Traitor's Emblem by Juan Gomez-Jurado\n" +
                     "The Shadow of the Wind by Carlos Ruiz Zafon\n" +
                     "Bel Canto by Ann Patchett\n" +
                     "The Curious Incident of the Dog in the Night-Time by Mark Haddon"));

end


rule "mystery-literature-no"
when
    ans: Odpowiedz(pytanie == Pytania.MYSTERY_LITERARY, wybor == "Definitely No");
then
    insert(Pytania.BASEBALL);
end


rule "baseball-yes"
when
    ans: Odpowiedz(pytanie == Pytania.BASEBALL, wybor == "Of course");
then
    insert(new Wynik("The Art of Fielding by Chad Harbach"));
end


rule "baseball-no"
when
    ans: Odpowiedz(pytanie == Pytania.BASEBALL, wybor == "No");
then
    insert(Pytania.CULTURE_OR_FANTASY);
end


rule "culture_yes"
when
    ans: Odpowiedz(pytanie == Pytania.CULTURE_OR_FANTASY, wybor == "Yes");
then
    insert(Pytania.NEW_CULTURE_TYPE);
end


rule "culture-type-civil"
when
    ans: Odpowiedz(pytanie == Pytania.NEW_CULTURE_TYPE, wybor == "Civil rights");
then
    insert(new Wynik("The Help by Kathyrn Stockett\n" +
                     "The Secret Life of Bees by Sue Monk Kidd"));
end

rule "culture-type-epistolary"
when
    ans: Odpowiedz(pytanie == Pytania.NEW_CULTURE_TYPE, wybor == "Epistolary");
then
    insert(new Wynik("The Guernsey Literary and Potato Peel Pie Society by" +
                     "Mary Ann Shaffer and Annie Barrows"));
end

rule "culture-type-japan"
when
    ans: Odpowiedz(pytanie == Pytania.NEW_CULTURE_TYPE, wybor == "Japan");
then
    insert(new Wynik("The Thousand Autumns of Jacob de Zoet by David Mitchell"));
end

rule "culture-type-historical"
when
    ans: Odpowiedz(pytanie == Pytania.NEW_CULTURE_TYPE, wybor == "Historical");
then
    insert(new Wynik("The Kite Runner by Khaled Hosseini\n"+
                     "A Thousand Splendid Suns by Khaled Hosseini"));
end


rule "culture-type-romance"
when
    ans: Odpowiedz(pytanie == Pytania.NEW_CULTURE_TYPE, wybor == "Romance");
then
    insert(new Wynik("Water for Elephants by Sara Gruen"));
end

rule "culture-type-war"
when
    ans: Odpowiedz(pytanie == Pytania.NEW_CULTURE_TYPE, wybor == "War");
then
    insert(new Wynik("Fall of Giants by Ken Follett"));
end


rule "culture_nope"
when
    ans: Odpowiedz(pytanie == Pytania.CULTURE_OR_FANTASY, wybor == "No");
then
    insert(Pytania.FANTASY_TYPE);
end


rule "Fantasy-type-epic"
when
    ans: Odpowiedz(pytanie == Pytania.FANTASY_TYPE, wybor == "Epic");
then
    insert(new Wynik("A Dance with Dragins by George R. R. Martin"));
end


rule "Fantasy-type-videogames"
when
    ans: Odpowiedz(pytanie == Pytania.FANTASY_TYPE, wybor == "Video games");
then
    insert(new Wynik("Ready Player One by Ernest Cline"));
end


rule "Fantasy-type-vampires"
when
    ans: Odpowiedz(pytanie == Pytania.FANTASY_TYPE, wybor == "Vampires");
then
    insert( new Wynik("A Discovery of Witches by Deborah Harkness"));
end


rule "Fantasy-type-historical"
when
    ans: Odpowiedz(pytanie == Pytania.FANTASY_TYPE, wybor == "Historical");
then
    insert(new Wynik("Cloud Atlas by David Mitchell"));
end


rule "Fantasy-type-magic"
when
    ans: Odpowiedz(pytanie == Pytania.FANTASY_TYPE, wybor == "Magic");
then
    insert(new Wynik("Jonathan Strange and Mr. Norrell by Susanna Clarke\n" +
                     "The Name of the Wind by Patrick Rothfuss"));
end

rule "fantasy-type-literary"
when
    ans: Odpowiedz(pytanie == Pytania.FANTASY_TYPE, wybor == "Literary");
then
    insert(new Wynik("Kafka on the Shore by Haruki Murakami"));
end

rule "fantasy-type-romance"
when
    ans: Odpowiedz(pytanie == Pytania.FANTASY_TYPE, wybor == "Romance");
then
    insert(new Wynik("Matched by Ally Condie"));
end
